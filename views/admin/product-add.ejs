<%- include("../../views/partials/admin/header") %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
   .error-message {
    display: none;
    color: red; /* To make sure the error message is visible */
}



       .thumbnails-container {
           display: flex;
           overflow-x: auto;
       }


       .thumbnail {
           margin-right: 10px;


       }
</style>
   <section class="content-main">
       <div class="row">
           <div class="col-9">
               <div class="content-header">
                   <h2 class="content-title">Add New Product</h2>
               </div>
           </div>
           <div class="col-lg-6">
               <div class="card mb-4">
                   <div class="card-body">
                       <form method="post" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm()">
                           <div class="mb-4">
                               <label for="product_name" class="form-label">Product Name</label>
                               <input type="text" placeholder="Type here" name="productName"
                                   class="form-control border" id="product_name">
                               <div id="productName-error" class="error-message"></div>
                           </div>
                           <div class="col-lg-4 mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select border" name="brand" required>
                                <option value="" disabled selected>Select a brand</option> <!-- Placeholder option -->
                                <% for (let i = 0; i < brand.length; i++) { %>
                                    <option value="<%= brand[i].brandName %>">
                                        <%= brand[i].brandName %>
                                    </option>
                                <% } %>
                            </select>                            
                               <div id="brand-error" class="error-message"></div>
                           </div>
                           <div class="mb-4">
                               <label class="form-label">Full description</label>
                               <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border"
                                   rows="4"></textarea>
                               <div id="description-error" class="error-message"></div>
                           </div>
                           <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="regularPrice" type="text" class="form-control border">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                             </div>
                             <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale price</label>
                                    <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                             </div>                             
                           </div>
                           <div class="row">
                              
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Color</label>
                                       <input  name="color" type="text" class="form-control border">
                                   </div>
                                   <div id="color-error" class="error-message"></div>
                               </div>
                               <div class="mb-4">
                                <label class="form-label">Sizes</label>
                            
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="sizes" value="6" id="size6">
                                    <label class="form-check-label" for="size6">6</label>
                                    <input type="number" class="form-control mt-2 size-quantity" id="quantity6" name="quantity6" placeholder="Quantity" style="display:none;">
                                </div>
                            
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="sizes" value="7" id="size7">
                                    <label class="form-check-label" for="size7">7</label>
                                    <input type="number" class="form-control mt-2 size-quantity" id="quantity7" name="quantity7" placeholder="Quantity" style="display:none;">
                                </div>
                            
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="sizes" value="8" id="size8">
                                    <label class="form-check-label" for="size8">8</label>
                                    <input type="number" class="form-control mt-2 size-quantity" id="quantity8" name="quantity8" placeholder="Quantity" style="display:none;">
                                </div>
                            
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="sizes" value="9" id="size9">
                                    <label class="form-check-label" for="size9">9</label>
                                    <input type="number" class="form-control mt-2 size-quantity" id="quantity9" name="quantity9" placeholder="Quantity" style="display:none;">
                                </div>
                            
                                <div id="sizes-error" class="error-message"></div>
                            </div>
                            
                            
                           </div>
                           <div class="card mb-4">
                               <div class="card-body">
                                   <div class="row gx-2">
                                       <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" style="width: 150px;" name="category" required>
                                            <option value="" disabled selected>Select a category</option> <!-- Placeholder option -->
                                            <% for (let i = 0; i < cat.length; i++) { %>
                                                <option value="<%= cat[i]._id %>">
                                                    <%= cat[i].name %>
                                                </option>
                                            <% } %>
                                        </select>                                        
                                           <div id="category-error" class="error-message"></div>
                                       </div>
                                   </div>
                               </div>
                           </div>


                           <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose images</h4>
                            </div>
                            <div class="border row">
                                <div id="addedImagesContainer" class="thumbnails-container"></div>
                            </div>
                            <div class="row">
                                <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                    <img src="" alt="" id="imgView1">
                                                                <input class="form-control" type="file" name="images" id="input1"
                                                                    accept="image/png, image/jpeg, image/jpg"
                                                                    onchange="viewImage1(event), viewImage(event, 1)">
                                                                    <div id="images-error" class="error-message"></div>
                                                            </div>
                                                            <div class="image-cropper d-flex align-items-center"
                                                                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                <img src="" id="croppedImg1" alt="">
                                                                <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                                            </div>
                                                        </div>
                                                       
                                                        <div class="row">
                                                            <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                                                <img src="" alt="" id="imgView2">


                                                                <input class="form-control" type="file" name="images" id="input2"
                                                                    accept="image/png, image/jpeg, image/jpg"
                                                                    onchange="viewImage2(event),viewImage(event, 2)">
                                                            </div>
                                                            <div class="image-cropper d-flex align-items-center"
                                                                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                <img src="" id="croppedImg2" alt="">
                                                                <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                                                            </div>
                                                        </div>
                                                       
                                                        <div class="row">
                                                            <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                                                <img src="" alt="" id="imgView3">


                                                                <input class="form-control" type="file" name="images" id="input3"
                                                                    accept="image/png, image/jpeg, image/jpg"
                                                                    onchange="viewImage3(event),viewImage(event, 3)">
                                                            </div>
                                                            <div class="image-cropper d-flex align-items-center"
                                                                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                <img src="" id="croppedImg3" alt="">
                                                                <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                                                            </div>
                                                        </div>
                                                       
                                                        <div class="row">
                                                            <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                                                <img src="" alt="" id="imgView4">


                                                       
                                                                <input class="form-control" type="file" name="images" id="input4"
                                                                    accept="image/png, image/jpeg, image/jpg"
                                                                    onchange="viewImage4(event),viewImage(event, 4)">
                                                            </div>
                                                            <div class="image-cropper d-flex align-items-center"
                                                                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                <img src="" id="croppedImg4" alt="">
                                                                <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
                                                            </div>
                                                        </div>
                       
                                                    </div>

                        
                           </div>
                           <div>
                               <button class="btn btn-md rounded font-sm hover-up"  type="submit" onclick="validateAndSubmit()">Publish</button>
                           </div>
                       </form>
                   </div>
               </div>
           </div>
       </div>
   </section>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
     
<script>
    function validateAndSubmit() {
        if (validateAndSubmit) {
            document.forms[0].submit()
        }
    }

    function viewImage1(event) {
        document.getElementById("imgView1").src = URL.createObjectURL(event.target.files[0])
    }

    function viewImage2(event) {
        document.getElementById("imgView2").src = URL.createObjectURL(event.target.files[0])
    }

    function viewImage3(event) {
        document.getElementById("imgView3").src = URL.createObjectURL(event.target.files[0])
    }

    function viewImage4(event) {
        document.getElementById("imgView4").src = URL.createObjectURL(event.target.files[0])
    }

    function viewImage(event,index) {
        let input = event.target
        let reader = new FileReader()

        reader.onload = function (){
            let dataURL = reader.result
            let image = document.getElementById("imgView"+index)
            image.src = dataURL

            let cropper = new Cropper(image,{
                aspectRatio : 1,
                viewMode : 1,
                guides : true,
                background : false,
                autoCropArea : 1,
                zoomable : true
            })

            let cropperContainer = document.querySelector("#croppedImg" + index).parentNode
            cropperContainer.style.display = "block"

            let saveButton = document.querySelector("#saveButton"+index)
            saveButton.addEventListener('click',async ()=>{
                let croppedCanvas = cropper.getCroppedCanvas()
                let croppedImage = document.getElementById("croppedImg" + index);
                croppedImage.src = croppedCanvas.toDataURL('image/jpeg' + 1.0)

                let timestamp = new Date().getTime()
                let fileName = `cropped-img-${timestamp}-${index}.png`;

                await croppedCanvas.toBlob(blob=>{
                    let input = document.getElementById('input'+index)
                    let imgFile = new File([blob], fileName, { type: blob.type });
                    const fileList = new DataTransfer()
                    fileList.items.add(imgFile)
                    input.files = fileList.files
                })

                cropperContainer.style.display = 'none'
                cropper.destroy()
            })
        }

        reader.readAsDataURL(input.files[0]);
    }

    const selectedImages = []
    document.getElementById("input1").addEventListener('change',handleFileSelect)

    function handleFileSelect(event){
        const addedImagesContainer = document.getElementById("addedImagesContainer")
        addedImagesContainer.innerHTML = ""
        const files = event.target.files
        for(let i=0;i<files.length;i++){
            const file = files[i];
            selectedImages.push(file)
            const thumbnail = document.createElement("div")
            thumbnail.classList.add("thumbnail")

            const img = document.createElement("img")
            img.src = URL.createObjectURL(file)
            img.alt = "thumbnail"
            img.style.width = "50px"
            img.style.height = "auto"
            const removeIcon = document.createElement("span")
            removeIcon.classList.add("remove-icon")
            removeIcon.innerHTML = "&times;"
            removeIcon.addEventListener('click',()=>{
                const index = selectedImages.indexOf(file)
                if(index!==-1){
                    selectedImages.splice(index,1)
                }
                thumbnail.remove()
            })

            thumbnail.appendChild(img)
            thumbnail.appendChild(removeIcon)
            addedImagesContainer.appendChild(thumbnail)
        }
    }

    document.querySelectorAll('.form-check-input').forEach((checkbox) => {
    checkbox.addEventListener('change', function () {
        const quantityInput = document.getElementById(`quantity${this.value}`);
        if (this.checked) {
            // Show the quantity input when the checkbox is checked
            quantityInput.style.display = 'block';
        } else {
            // Hide the quantity input when the checkbox is unchecked
            quantityInput.style.display = 'none';
            quantityInput.value = '';  // Clear the quantity value
        }
    });
});

function getSelectedSizesAndQuantities() {
    const selectedSizes = [];

    document.querySelectorAll('.form-check-input').forEach((checkbox) => {
        if (checkbox.checked) {
            const size = checkbox.value;  // Get the size
            const quantity = document.getElementById(`quantity${size}`).value;  // Get the corresponding quantity
            selectedSizes.push({ size, quantity });
        }
    });

    return selectedSizes;
}


    // Function to display error messages
function displayErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.visibility = "visible";
    errorElement.style.display = "block"; // Ensures it's properly shown
}

// Function to clear error messages
function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';          // Clear the error message text
        element.style.visibility = "hidden";  // Hide the error message
        element.style.display = "none";       // Make sure it's not displayed
    });
}

// Function to validate form
function validateForm() {
    clearErrorMessages();  // Clear any previous error messages

    const name = document.getElementsByName('productName')[0].value;
    const description = document.getElementById('descriptionid').value;
    const brand = document.getElementsByName('brand')[0].value;
    const price = document.getElementsByName('regularPrice')[0].value;
    const salePrice = document.getElementsByName('salePrice')[0].value;
    const color = document.getElementsByName('color')[0].value;
    const category = document.getElementsByName('category')[0].value;
    const images = document.getElementById('input1');
    const selectedSizes = getSelectedSizesAndQuantities();

    let isValid = true;

    // Product name validation
    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
        isValid = false;
    }

    // Description validation
    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(description.trim())) {
        displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
        isValid = false;
    }

    // Quantity validation
    if (validateSizesAndQuantities()) {
        // Proceed with form submission if valid
        console.log('Form is valid!');
    } else {
        // Handle invalid form
        console.log('Form has errors.');
        isValid = false
    }

    // Regular price validation
    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }

    // Sale price validation
    if (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }

    // Comparison between regular price and sale price
    if (isValid && parseFloat(price) <= parseFloat(salePrice)) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
    }

    // Color validation
    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }

    // Image validation
    if (images.files.length === 0) {
        displayErrorMessage('images-error', 'Please select an image.');
        isValid = false;
    }

    return isValid;
}

function validateSizesAndQuantities() {
    let isValid = true;
    let hasSelectedSize = false;

    document.getElementById('sizes-error').textContent = '';  // Clear any previous errors

    // Loop through all checkboxes to validate sizes and quantities
    document.querySelectorAll('.form-check-input').forEach((checkbox) => {
        if (checkbox.checked) {
            hasSelectedSize = true;  // At least one size is selected
            const size = checkbox.value;
            const quantityInput = document.getElementById(`quantity${size}`);
            const quantity = quantityInput.value;

            // Validate quantity: it should be a non-empty, non-negative number
            if (quantity.trim() === "" || parseInt(quantity) < 0 || isNaN(quantity)) {
                displayErrorMessage(`quantity-error-${size}`, `Please enter a valid non-negative quantity for size ${size}.`);
                isValid = false;
            } else {
                clearErrorMessage(`quantity-error-${size}`);
            }
        }
    });

    // Check if at least one size is selected
    if (!hasSelectedSize) {
        displayErrorMessage('sizes-error', 'Please select at least one size.');
        isValid = false;
    }

    return isValid;
}



          
</script>
<%- include("../../views/partials/admin/footer") %>