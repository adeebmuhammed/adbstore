<%-include("../../views/partials/user/header")%>

<section class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcrumb__text">
                    <h4>Profile</h4>
                    <div class="breadcrumb__links">
                        <a href="/">Home</a>
                        <a href="/profile">Profile</a>
                        <a href="/manage-addresses">Manage Address</a>
                        <a href="/manage-addresses/add-address">Add Address</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- Breadcrumb Section End -->


    <div class="container mt-5">
        <h2 class="mb-4">Add New Address</h2>
        <form id="addressform" method="post" action="/manage-addresses/add-address" novalidate>
            <div class="form-group">
                <label for="fullname">Full Name:</label>
                <input type="text" class="form-control" id="name" name="name" required>
                <div id="error1" class="error-message"></div>
            </div>
            <div class="form-group">
                <label for="housename">House Name:</label>
                <input type="text" class="form-control" id="houseName" name="houseName" required>
                <div id="error2" class="error-message"></div>
            </div>
            <div class="form-group">
                <label for="street">Street:</label>
                <input type="text" class="form-control" id="street" name="street" required>
                <div id="error3" class="error-message"></div>
            </div>
            <div class="form-group">
                <label for="city">City:</label>
                <input type="text" class="form-control" id="city" name="city" required>
                <div id="error4" class="error-message"></div>
            </div>
            <div class="form-group">
                <label for="state">State:</label>
                <input type="text" class="form-control" id="state" name="state" required>
                <div id="error5" class="error-message"></div>
            </div>
            <div class="form-group">
                <label for="pincode">Pincode:</label>
                <input type="text" class="form-control" id="pincode" name="pincode" required>
                <div id="error6" class="error-message"></div>
            </div>
            <div class="form-group">
                <label for="phone">Phone:</label>
                <input type="tel" class="form-control" id="mobile" name="mobile" required>
                <div id="error7" class="error-message"></div>
            </div>
            <button type="submit" class="btn btn-primary">Add</button>
        </form>
    </div>


    <script>

document.getElementById('addressform').addEventListener('submit', function (event) {
    event.preventDefault(); // Prevent form submission for validation
    console.log("Form submission prevented for validation");

    // Get all input values
    const name = document.getElementById('name').value.trim();
    const houseName = document.getElementById('houseName').value.trim();
    const street = document.getElementById('street').value.trim();
    const city = document.getElementById('city').value.trim();
    const state = document.getElementById('state').value.trim();
    const pincode = document.getElementById('pincode').value.trim();
    const mobile = document.getElementById('mobile').value.trim();

    // Clear all previous errors
    clearErrors();
    console.log("Clearing previous errors...");

    // Validation flags
    let isValid = true;

    // Regex Patterns
    const namePattern = /^[a-zA-Z\s]+$/;
    const phonePattern = /^[1-9][0-9]{9}$/;

    // Validate Name
    if (!name || !namePattern.test(name) || name.replace(/\s/g, '').length === 0) {
        showError('error1', 'Name should only contain letters and spaces and cannot be empty or only spaces.');
        isValid = false;
        console.log("Name validation failed");
    }

    // Validate Phone
    if (!phonePattern.test(mobile)) {
        showError('error7', 'Phone must be a 10-digit number and cannot start with 0.');
        isValid = false;
        console.log("Phone validation failed");
    }

    // Validate other fields
    if (!houseName || houseName.replace(/\s/g, '').length === 0) {
        showError('error2', 'House name cannot be empty or contain only spaces.');
        isValid = false;
        console.log("House name validation failed");
    }
    if (!street || street.replace(/\s/g, '').length === 0) {
        showError('error3', 'Street cannot be empty or contain only spaces.');
        isValid = false;
        console.log("Street validation failed");
    }
    if (!city || city.replace(/\s/g, '').length === 0) {
        showError('error4', 'City cannot be empty or contain only spaces.');
        isValid = false;
        console.log("City validation failed");
    }
    if (!state || state.replace(/\s/g, '').length === 0) {
        showError('error5', 'State cannot be empty or contain only spaces.');
        isValid = false;
        console.log("State validation failed");
    }
    if (!pincode || pincode.replace(/\s/g, '').length === 0) {
    showError('error6', 'Pincode cannot be empty or contain only spaces.');
    isValid = false;
    console.log("Pincode validation failed");
} else if (!/^\d+$/.test(pincode)) {
    showError('error6', 'Pincode must contain only numbers.');
    isValid = false;
    console.log("Pincode validation failed: contains non-numeric characters");
}


    // If validation fails, don't submit the form
    if (isValid) {
        console.log("Form is valid, showing confirmation popup");
        Swal.fire({
            title: 'Are you sure?',
            //text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, save it!'
        }).then((result) => {
            if (result.value) {
                document.getElementById('addressform').submit(); // Submit the form
            }
        });
    } else {
        console.log("Form is invalid, errors should be displayed");
    }
});

function clearErrors() {
    const errorFields = document.querySelectorAll('.error-message');
    errorFields.forEach((field) => {
        field.textContent = ''; // Clear error message
    });
    console.log("Errors cleared");
}

function showError(errorId, message) {
    const errorElement = document.getElementById(errorId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block'; // Ensure the error message is visible
        errorElement.style.color = 'red';
    }
}
</script>
    </script>

<%-include("../../views/partials/user/footer")%>