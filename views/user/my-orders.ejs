<%-include("../../views/partials/user/header")%>

<div class="container mt-4">
    <div class="row">
        <!-- Sidebar -->
        <%- include("../../views/partials/user/profile-sidebar") %>

        <!-- Orders Table -->
        <div class="col-md-9">
            <h1>My Orders</h1>
            <table class="table table-bordered table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>Order ID</th>
                        <th>Status</th>
                        <th>Total Price</th>
                        <th>Address</th>
                        <th>Product Name</th>
                        <th>Quantity</th>
                        <th>Action</th>
                        <th>Details</th>
                    </tr>
                </thead>
                <tbody>
                    <% orders.forEach(order => { %>
                        <tr>
                            <td><%= order.orderId %></td>
                            <td><%= order.status %></td>
                            <td>â‚¹<%= order.totalprice %></td>
                            <td><%= order.addressDetails ? order.addressDetails.houseName + ', ' + order.addressDetails.street + ', ' + order.addressDetails.city + ', ' + order.addressDetails.state + ', ' + order.addressDetails.pincode : 'Address not found' %></td>
                            <td>
                                <% order.orderedItems.forEach(item => { %>
                                    <div><%= item.productDetails ? item.productDetails.productName : 'Product not found' %></div>
                                <% }) %>
                            </td>
                            <td>
                                <% order.orderedItems.forEach(item => { %>
                                    <div><%= item.quantity %></div>
                                <% }) %>
                            </td>
                            <td>
                                <% if (order.status === 'Canceled') { %>
                                    <button class="btn btn-secondary" disabled>Canceled</button>
                                <% } else if (order.status == 'Pending') { %>
                                    <button id="retry-payment-btn" data-order-id="<%= order.orderId %>">
                                        Retry Payment
                                    </button>
                                <% } else if (order.status == 'Delivered') { %>
                                    <button id="requestReturn" data-order-id="<%= order.orderId %>">
                                        Request Return
                                    </button>
                                <% } else if (order.status == 'Return Request') { %>
                                    <button class="btn btn-secondary" disabled>Return requested</button>                                                                        
                                <% } else if (order.status !== 'Delivered') { %>
                                    <button class="btn btn-danger cancel-order-btn" data-order-id="<%= order._id %>">Cancel</button>
                                <% } else { %>
                                    <span>N/A</span>
                                <% } %>                                
                            </td>
                            <td><a href="/orderDetails/<%=order._id%>">Order Details</a></td>                                               
                        </tr>
                    <% }) %>
                </tbody>                
            </table>
        </div>
    </div>
</div>

<%-include("../../views/partials/user/footer")%>

<script>
    document.addEventListener('DOMContentLoaded', function () {

        const cancelButtons = document.querySelectorAll('.cancel-order-btn');
        cancelButtons.forEach(button => {
            button.addEventListener('click', function () {
                const orderId = this.getAttribute('data-order-id');

                Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you really want to cancel this order?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, cancel it!',
                    cancelButtonText: 'No, keep it'
                }).then((result) => {
                    if (result.isConfirmed) {

                        fetch(`/cancel-order/${orderId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire(
                                    'Canceled!',
                                    'Your order has been canceled.',
                                    'success'
                                ).then(() => {
                                    window.location.reload(); 
                                });
                            } else {
                                Swal.fire(
                                    'Error!',
                                    data.message || 'Failed to cancel order.',
                                    'error'
                                );
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire(
                                'Error!',
                                'An unexpected error occurred.',
                                'error'
                            );
                        });
                    }
                });
            });
        });

        const returnButton = document.getElementById('requestReturn');
        returnButton.addEventListener('click', function () {
                const orderId = this.getAttribute('data-order-id');

                Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you really want to return this order?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, return it!',
                    cancelButtonText: 'No, keep it'
                }).then((result) => {
                    if (result.isConfirmed) {

                        fetch(`/return-order/${orderId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire(
                                    'Return Requested!',
                                    'Your order has been return requested.',
                                    'success'
                                ).then(() => {
                                    window.location.reload(); 
                                });
                            } else {
                                Swal.fire(
                                    'Error!',
                                    data.message || 'Failed to request return order.',
                                    'error'
                                );
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire(
                                'Error!',
                                'An unexpected error occurred.',
                                'error'
                            );
                        });
                    }
                });
            });

        document.getElementById('retry-payment-btn').addEventListener('click', async () => {
            const orderId = document.getElementById('retry-payment-btn').getAttribute('data-order-id');

            try {
                Swal.fire({
                    title: 'Processing...',
                    text: 'Initializing retry payment. Please wait.',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch(`/retry-payment/${orderId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const data = await response.json();

                if (data.success) {
                    Swal.close();
                    const { finalAmount, razorpayKey, orderId } = data;

                    const options = {
                        key: razorpayKey,
                        amount: finalAmount * 100, 
                        currency: "INR",
                        name: "Adb Store",
                        description: "Purchase Description",
                        order_id: orderId,
                        handler: async function (response) {
                            await verifyRetryPayment(
                                response.razorpay_payment_id,
                                response.razorpay_order_id,
                                response.razorpay_signature
                            );
                        },
                        modal: {
                            ondismiss: function () {
                                Swal.fire({
                                    title: 'Payment Canceled',
                                    text: 'You canceled the payment process.',
                                    icon: 'info'
                                });
                            }
                        },
                        prefill: {
                            name: "Customer Name",
                            email: "customer@example.com",
                            contact: "9999999999"
                        },
                        theme: { color: "#F37254" }
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();
                } else {
                    Swal.fire(
                        'Failed',
                        data.message || "Failed to initialize retry payment. Please try again later.",
                        'error'
                    );
                }
            } catch (error) {
                console.error("Error during retry payment initialization:", error);
                Swal.fire(
                    'Error!',
                    'An error occurred. Please try again later.',
                    'error'
                );
            }
        });

        async function verifyRetryPayment(razorpay_payment_id, razorpay_order_id, razorpay_signature) {
            try {
                Swal.fire({
                    title: 'Verifying Payment',
                    text: 'Please wait while we verify your payment.',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch('/verify-retry-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ razorpay_payment_id, razorpay_order_id, razorpay_signature })
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Payment verified successfully!',
                        icon: 'success'
                    }).then(() => {
                        window.location.href = `/order-confirmation/${data.orderId}`;
                    });
                } else {
                    Swal.fire({
                        title: "Error!",
                        text: data.message || "Payment verification failed.",
                        icon: "error"
                    });
                }
            } catch (error) {
                console.error("Error verifying retry payment:", error);
                Swal.fire(
                    'Error!',
                    'An error occurred during payment verification. Please try again later.',
                    'error'
                );
            }
        }
    });
</script>
